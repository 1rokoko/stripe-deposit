const https = require('https');

const baseUrl = 'https://stripe-deposit.vercel.app';
const authToken = '+wHLpI2G1rV+VFmAk7mdomTDVf+glkljgtJiksmRft8=';

function makeRequest(path, method = 'GET', data = null, headers = {}) {
  return new Promise((resolve, reject) => {
    const url = new URL(path, baseUrl);
    
    const defaultHeaders = {
      'Content-Type': 'application/json',
      'User-Agent': 'Stripe-Deposit-E2E-Test/1.0'
    };
    
    if (authToken && path.includes('/api/') && !headers.hasOwnProperty('Authorization')) {
      defaultHeaders['Authorization'] = `Bearer ${authToken}`;
    }
    
    const requestHeaders = { ...defaultHeaders, ...headers };
    
    const options = {
      hostname: url.hostname,
      port: 443,
      path: url.pathname + url.search,
      method: method,
      headers: requestHeaders
    };
    
    const req = https.request(options, (res) => {
      let body = '';
      res.on('data', (chunk) => body += chunk);
      res.on('end', () => {
        try {
          const jsonBody = body ? JSON.parse(body) : {};
          resolve({ status: res.statusCode, body: jsonBody, rawBody: body });
        } catch (e) {
          resolve({ status: res.statusCode, body: null, rawBody: body });
        }
      });
    });
    
    req.on('error', reject);
    
    if (data && method !== 'GET') {
      req.write(JSON.stringify(data));
    }
    
    req.end();
  });
}

async function testEndToEnd() {
  console.log('üß™ –†–ê–£–ù–î –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø 3: End-to-End —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π\n');
  
  let passedTests = 0;
  let totalTests = 0;
  
  // Test 1: Infrastructure Health
  console.log('üèóÔ∏è –ë–õ–û–ö 1: –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏ –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã');
  
  totalTests++;
  try {
    const healthResponse = await makeRequest('/healthz');
    console.log(`   ‚úÖ Health Check: ${healthResponse.status === 200 ? 'PASS' : 'FAIL'} (${healthResponse.status})`);
    if (healthResponse.status === 200) passedTests++;
  } catch (error) {
    console.log(`   ‚ùå Health Check: FAIL (${error.message})`);
  }
  
  totalTests++;
  try {
    const metricsResponse = await makeRequest('/metrics');
    console.log(`   ‚úÖ Metrics API: ${metricsResponse.status === 200 ? 'PASS' : 'FAIL'} (${metricsResponse.status})`);
    if (metricsResponse.status === 200) passedTests++;
  } catch (error) {
    console.log(`   ‚ùå Metrics API: FAIL (${error.message})`);
  }
  
  // Test 2: Authentication & Authorization
  console.log('\nüîê –ë–õ–û–ö 2: –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
  
  totalTests++;
  try {
    const noAuthResponse = await makeRequest('/metrics', 'GET', null, { 'Authorization': '' });
    console.log(`   ‚úÖ Auth Required: ${noAuthResponse.status === 401 ? 'PASS' : 'FAIL'} (${noAuthResponse.status})`);
    if (noAuthResponse.status === 401) passedTests++;
  } catch (error) {
    console.log(`   ‚ùå Auth Required: FAIL (${error.message})`);
  }
  
  totalTests++;
  try {
    const badAuthResponse = await makeRequest('/metrics', 'GET', null, { 'Authorization': 'Bearer invalid_token' });
    console.log(`   ‚úÖ Bad Token Rejected: ${badAuthResponse.status === 401 ? 'PASS' : 'FAIL'} (${badAuthResponse.status})`);
    if (badAuthResponse.status === 401) passedTests++;
  } catch (error) {
    console.log(`   ‚ùå Bad Token Rejected: FAIL (${error.message})`);
  }
  
  // Test 3: Core API Functionality
  console.log('\nüìä –ë–õ–û–ö 3: –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å API');
  
  totalTests++;
  try {
    const depositsResponse = await makeRequest('/api/deposits');
    console.log(`   ‚úÖ List Deposits: ${depositsResponse.status === 200 ? 'PASS' : 'FAIL'} (${depositsResponse.status})`);
    if (depositsResponse.status === 200) passedTests++;
  } catch (error) {
    console.log(`   ‚ùå List Deposits: FAIL (${error.message})`);
  }
  
  totalTests++;
  try {
    const invalidAmountResponse = await makeRequest('/api/deposits/hold/999', 'POST', {
      customerId: 'cus_test',
      paymentMethodId: 'pm_test'
    });
    console.log(`   ‚úÖ Input Validation: ${invalidAmountResponse.status === 400 ? 'PASS' : 'FAIL'} (${invalidAmountResponse.status})`);
    if (invalidAmountResponse.status === 400) passedTests++;
  } catch (error) {
    console.log(`   ‚ùå Input Validation: FAIL (${error.message})`);
  }
  
  // Test 4: Demo Functionality
  console.log('\nüé≠ –ë–õ–û–ö 4: Demo —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å');
  
  totalTests++;
  try {
    const demoResponse = await makeRequest('/api/demo');
    console.log(`   ‚úÖ Demo API: ${demoResponse.status === 200 ? 'PASS' : 'FAIL'} (${demoResponse.status})`);
    if (demoResponse.status === 200) passedTests++;
  } catch (error) {
    console.log(`   ‚ùå Demo API: FAIL (${error.message})`);
  }
  
  totalTests++;
  try {
    const demoDepositsResponse = await makeRequest('/api/demo/deposits');
    console.log(`   ‚úÖ Demo Deposits: ${demoDepositsResponse.status === 200 ? 'PASS' : 'FAIL'} (${demoDepositsResponse.status})`);
    if (demoDepositsResponse.status === 200) passedTests++;
  } catch (error) {
    console.log(`   ‚ùå Demo Deposits: FAIL (${error.message})`);
  }
  
  totalTests++;
  try {
    const demoHoldResponse = await makeRequest('/api/demo/deposits/hold/100', 'POST', {
      customerId: 'cus_demo_e2e',
      metadata: { test: 'end-to-end' }
    });
    console.log(`   ‚úÖ Demo Hold Creation: ${demoHoldResponse.status === 200 ? 'PASS' : 'FAIL'} (${demoHoldResponse.status})`);
    if (demoHoldResponse.status === 200) passedTests++;
  } catch (error) {
    console.log(`   ‚ùå Demo Hold Creation: FAIL (${error.message})`);
  }
  
  // Test 5: Webhook Endpoints
  console.log('\nü™ù –ë–õ–û–ö 5: Webhook endpoints');
  
  totalTests++;
  try {
    const webhookResponse = await makeRequest('/api/stripe/webhook', 'POST', {
      id: 'evt_test_e2e',
      type: 'payment_intent.succeeded'
    }, { 'stripe-signature': 'test_signature' });
    console.log(`   ‚úÖ Webhook Endpoint: ${webhookResponse.status === 400 ? 'PASS' : 'FAIL'} (${webhookResponse.status}) - Signature validation working`);
    if (webhookResponse.status === 400) passedTests++;
  } catch (error) {
    console.log(`   ‚ùå Webhook Endpoint: FAIL (${error.message})`);
  }
  
  // Test 6: Web Interface
  console.log('\nüåê –ë–õ–û–ö 6: –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å');
  
  totalTests++;
  try {
    const webResponse = await makeRequest('/');
    console.log(`   ‚úÖ Web Interface: ${webResponse.status === 200 ? 'PASS' : 'FAIL'} (${webResponse.status})`);
    if (webResponse.status === 200) passedTests++;
  } catch (error) {
    console.log(`   ‚ùå Web Interface: FAIL (${error.message})`);
  }
  
  // Test 7: Error Handling
  console.log('\n‚ö†Ô∏è –ë–õ–û–ö 7: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫');
  
  totalTests++;
  try {
    const notFoundResponse = await makeRequest('/api/nonexistent');
    console.log(`   ‚úÖ 404 Handling: ${notFoundResponse.status === 404 ? 'PASS' : 'FAIL'} (${notFoundResponse.status})`);
    if (notFoundResponse.status === 404) passedTests++;
  } catch (error) {
    console.log(`   ‚ùå 404 Handling: FAIL (${error.message})`);
  }
  
  // Final Results
  console.log('\nüìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:');
  console.log(`   –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: ${passedTests}/${totalTests}`);
  console.log(`   –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${Math.round((passedTests/totalTests) * 100)}%`);
  
  if (passedTests === totalTests) {
    console.log('   üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!');
  } else if (passedTests >= totalTests * 0.8) {
    console.log('   ‚úÖ –ë–û–õ–¨–®–ò–ù–°–¢–í–û –¢–ï–°–¢–û–í –ü–†–û–ô–î–ï–ù–û! –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ö–æ—Ä–æ—à–æ!');
  } else {
    console.log('   ‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞.');
  }
  
  console.log('\n‚úÖ –†–∞—É–Ω–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è 3 –∑–∞–≤–µ—Ä—à–µ–Ω!');
  return { passedTests, totalTests, successRate: (passedTests/totalTests) * 100 };
}

testEndToEnd().catch(console.error);
