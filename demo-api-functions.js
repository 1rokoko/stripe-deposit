const https = require('https');

const baseUrl = 'https://stripe-deposit.vercel.app';
const authToken = '+wHLpI2G1rV+VFmAk7mdomTDVf+glkljgtJiksmRft8=';

function makeRequest(path, method = 'GET', data = null, headers = {}) {
  return new Promise((resolve, reject) => {
    const url = new URL(path, baseUrl);
    
    const defaultHeaders = {
      'Content-Type': 'application/json',
      'User-Agent': 'Stripe-Deposit-Demo/1.0'
    };
    
    if (authToken && path.includes('/api/') && !headers.hasOwnProperty('Authorization')) {
      defaultHeaders['Authorization'] = `Bearer ${authToken}`;
    }
    
    const requestHeaders = { ...defaultHeaders, ...headers };
    
    const options = {
      hostname: url.hostname,
      port: 443,
      path: url.pathname + url.search,
      method: method,
      headers: requestHeaders
    };
    
    const req = https.request(options, (res) => {
      let body = '';
      res.on('data', (chunk) => body += chunk);
      res.on('end', () => {
        try {
          const jsonBody = body ? JSON.parse(body) : {};
          resolve({ status: res.statusCode, body: jsonBody, rawBody: body });
        } catch (e) {
          resolve({ status: res.statusCode, body: null, rawBody: body });
        }
      });
    });
    
    req.on('error', reject);
    
    if (data && method !== 'GET') {
      req.write(JSON.stringify(data));
    }
    
    req.end();
  });
}

function formatResponse(response, title) {
  console.log(`\nüìã ${title}`);
  console.log(`   Status: ${response.status}`);
  if (response.body) {
    console.log(`   Response: ${JSON.stringify(response.body, null, 2).substring(0, 500)}${JSON.stringify(response.body, null, 2).length > 500 ? '...' : ''}`);
  } else {
    console.log(`   Raw Response: ${response.rawBody.substring(0, 200)}${response.rawBody.length > 200 ? '...' : ''}`);
  }
}

async function demonstrateAPIFunctions() {
  console.log('üéØ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø API –§–£–ù–ö–¶–ò–ô STRIPE DEPOSIT');
  console.log('=' .repeat(60));
  console.log(`üåê –ë–∞–∑–æ–≤—ã–π URL: ${baseUrl}`);
  console.log(`üîë –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: Bearer —Ç–æ–∫–µ–Ω –Ω–∞—Å—Ç—Ä–æ–µ–Ω`);
  console.log('=' .repeat(60));
  
  // 1. Infrastructure APIs
  console.log('\nüèóÔ∏è –ë–õ–û–ö 1: –ò–ù–§–†–ê–°–¢–†–£–ö–¢–£–†–ù–´–ï API');
  
  try {
    const healthResponse = await makeRequest('/healthz');
    formatResponse(healthResponse, 'Health Check API (–ø—É–±–ª–∏—á–Ω—ã–π)');
  } catch (error) {
    console.log(`\nüìã Health Check API\n   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
  }
  
  try {
    const metricsResponse = await makeRequest('/metrics');
    formatResponse(metricsResponse, 'Metrics API (—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π)');
  } catch (error) {
    console.log(`\nüìã Metrics API\n   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
  }
  
  // 2. Core Deposit APIs
  console.log('\nüí∞ –ë–õ–û–ö 2: –û–°–ù–û–í–ù–´–ï API –î–ï–ü–û–ó–ò–¢–û–í');
  
  try {
    const depositsResponse = await makeRequest('/api/deposits');
    formatResponse(depositsResponse, '–°–ø–∏—Å–æ–∫ –¥–µ–ø–æ–∑–∏—Ç–æ–≤');
  } catch (error) {
    console.log(`\nüìã –°–ø–∏—Å–æ–∫ –¥–µ–ø–æ–∑–∏—Ç–æ–≤\n   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
  }
  
  try {
    const hold100Response = await makeRequest('/api/deposits/hold/100', 'POST', {
      customerId: 'cus_demo_api_test',
      paymentMethodId: 'pm_card_visa',
      metadata: { source: 'api_demo', test: true }
    });
    formatResponse(hold100Response, '–°–æ–∑–¥–∞–Ω–∏–µ $100 hold (–æ–∂–∏–¥–∞–µ—Ç—Å—è –æ—à–∏–±–∫–∞ —Å live key)');
  } catch (error) {
    console.log(`\nüìã –°–æ–∑–¥–∞–Ω–∏–µ $100 hold\n   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
  }
  
  // 3. Demo APIs
  console.log('\nüé≠ –ë–õ–û–ö 3: DEMO API (–ë–ï–ó –†–ï–ê–õ–¨–ù–´–• –ü–õ–ê–¢–ï–ñ–ï–ô)');
  
  try {
    const demoInfoResponse = await makeRequest('/api/demo');
    formatResponse(demoInfoResponse, 'Demo API –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è');
  } catch (error) {
    console.log(`\nüìã Demo API –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
  }
  
  try {
    const demoHealthResponse = await makeRequest('/api/demo/health');
    formatResponse(demoHealthResponse, 'Demo Health Check');
  } catch (error) {
    console.log(`\nüìã Demo Health Check\n   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
  }
  
  try {
    const demoDepositsResponse = await makeRequest('/api/demo/deposits');
    formatResponse(demoDepositsResponse, 'Demo —Å–ø–∏—Å–æ–∫ –¥–µ–ø–æ–∑–∏—Ç–æ–≤');
  } catch (error) {
    console.log(`\nüìã Demo —Å–ø–∏—Å–æ–∫ –¥–µ–ø–æ–∑–∏—Ç–æ–≤\n   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
  }
  
  try {
    const demoHold100Response = await makeRequest('/api/demo/deposits/hold/100', 'POST', {
      customerId: 'cus_demo_final_test',
      metadata: { source: 'final_demo', timestamp: new Date().toISOString() }
    });
    formatResponse(demoHold100Response, 'Demo —Å–æ–∑–¥–∞–Ω–∏–µ $100 hold');
  } catch (error) {
    console.log(`\nüìã Demo —Å–æ–∑–¥–∞–Ω–∏–µ $100 hold\n   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
  }
  
  try {
    const demoDepositDetailsResponse = await makeRequest('/api/demo/deposits/dep_demo_001');
    formatResponse(demoDepositDetailsResponse, 'Demo –¥–µ—Ç–∞–ª–∏ –¥–µ–ø–æ–∑–∏—Ç–∞');
  } catch (error) {
    console.log(`\nüìã Demo –¥–µ—Ç–∞–ª–∏ –¥–µ–ø–æ–∑–∏—Ç–∞\n   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
  }
  
  try {
    const demoCaptureResponse = await makeRequest('/api/demo/deposits/dep_demo_001/capture', 'POST', {
      amount: 5000
    });
    formatResponse(demoCaptureResponse, 'Demo –∑–∞—Ö–≤–∞—Ç –¥–µ–ø–æ–∑–∏—Ç–∞');
  } catch (error) {
    console.log(`\nüìã Demo –∑–∞—Ö–≤–∞—Ç –¥–µ–ø–æ–∑–∏—Ç–∞\n   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
  }
  
  // 4. Webhook APIs
  console.log('\nü™ù –ë–õ–û–ö 4: WEBHOOK API');
  
  try {
    const webhookResponse = await makeRequest('/api/stripe/webhook', 'POST', {
      id: 'evt_demo_final',
      type: 'payment_intent.succeeded',
      data: { object: { id: 'pi_demo_final', status: 'succeeded' } }
    }, { 'stripe-signature': 'demo_signature' });
    formatResponse(webhookResponse, 'Stripe Webhook (–æ–∂–∏–¥–∞–µ—Ç—Å—è –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∏)');
  } catch (error) {
    console.log(`\nüìã Stripe Webhook\n   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
  }
  
  // 5. Validation & Error Handling
  console.log('\n‚ö†Ô∏è –ë–õ–û–ö 5: –í–ê–õ–ò–î–ê–¶–ò–Ø –ò –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö');
  
  try {
    const invalidAmountResponse = await makeRequest('/api/deposits/hold/999', 'POST', {
      customerId: 'cus_test',
      paymentMethodId: 'pm_test'
    });
    formatResponse(invalidAmountResponse, '–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ–≤–µ—Ä–Ω–æ–π —Å—É–º–º—ã');
  } catch (error) {
    console.log(`\nüìã –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ–≤–µ—Ä–Ω–æ–π —Å—É–º–º—ã\n   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
  }
  
  try {
    const unauthorizedResponse = await makeRequest('/api/deposits', 'GET', null, { 'Authorization': '' });
    formatResponse(unauthorizedResponse, '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
  } catch (error) {
    console.log(`\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏\n   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
  }
  
  try {
    const notFoundResponse = await makeRequest('/api/nonexistent');
    formatResponse(notFoundResponse, '–û–±—Ä–∞–±–æ—Ç–∫–∞ 404 –æ—à–∏–±–æ–∫');
  } catch (error) {
    console.log(`\nüìã –û–±—Ä–∞–±–æ—Ç–∫–∞ 404 –æ—à–∏–±–æ–∫\n   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
  }
  
  // Summary
  console.log('\n' + '=' .repeat(60));
  console.log('üéâ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø API –§–£–ù–ö–¶–ò–ô –ó–ê–í–ï–†–®–ï–ù–ê!');
  console.log('=' .repeat(60));
  console.log('‚úÖ –ü—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ API endpoints:');
  console.log('   ‚Ä¢ Health Check –∏ Metrics API');
  console.log('   ‚Ä¢ –û—Å–Ω–æ–≤–Ω—ã–µ API –¥–µ–ø–æ–∑–∏—Ç–æ–≤ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π');
  console.log('   ‚Ä¢ Demo API –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
  console.log('   ‚Ä¢ Webhook endpoints —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π');
  console.log('   ‚Ä¢ –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫');
  console.log('   ‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏');
  console.log('\nüöÄ –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!');
}

demonstrateAPIFunctions().catch(console.error);
