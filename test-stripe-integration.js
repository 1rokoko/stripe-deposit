const https = require('https');

const baseUrl = 'https://stripe-deposit.vercel.app';
const authToken = '+wHLpI2G1rV+VFmAk7mdomTDVf+glkljgtJiksmRft8=';

function makeRequest(path, method = 'GET', data = null, headers = {}) {
  return new Promise((resolve, reject) => {
    const url = new URL(path, baseUrl);
    
    const defaultHeaders = {
      'Content-Type': 'application/json',
      'User-Agent': 'Stripe-Deposit-Test/1.0'
    };
    
    if (authToken && path.includes('/api/')) {
      defaultHeaders['Authorization'] = `Bearer ${authToken}`;
    }
    
    const requestHeaders = { ...defaultHeaders, ...headers };
    
    const options = {
      hostname: url.hostname,
      port: 443,
      path: url.pathname + url.search,
      method: method,
      headers: requestHeaders
    };
    
    const req = https.request(options, (res) => {
      let body = '';
      res.on('data', (chunk) => body += chunk);
      res.on('end', () => {
        try {
          const jsonBody = body ? JSON.parse(body) : {};
          resolve({ status: res.statusCode, body: jsonBody, rawBody: body });
        } catch (e) {
          resolve({ status: res.statusCode, body: null, rawBody: body });
        }
      });
    });
    
    req.on('error', reject);
    
    if (data && method !== 'GET') {
      req.write(JSON.stringify(data));
    }
    
    req.end();
  });
}

async function testStripeIntegration() {
  console.log('üß™ –†–∞—É–Ω–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è 2: Stripe –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∏ webhook endpoints...\n');
  
  // Test 1: Stripe API endpoints
  console.log('1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Stripe API endpoints');
  
  try {
    const depositsResponse = await makeRequest('/api/deposits');
    console.log(`   GET /api/deposits: ${depositsResponse.status}`);
    if (depositsResponse.status === 200) {
      console.log(`   ‚úÖ Deposits API —Ä–∞–±–æ—Ç–∞–µ—Ç`);
      console.log(`   –û—Ç–≤–µ—Ç: ${JSON.stringify(depositsResponse.body, null, 2).substring(0, 200)}...`);
    } else {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${JSON.stringify(depositsResponse.body)}`);
    }
  } catch (error) {
    console.log(`   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`);
  }
  
  // Test 2: Create deposit
  console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–∞');
  
  try {
    const createResponse = await makeRequest('/api/deposits', 'POST', {
      customerId: 'cus_test_integration',
      amount: 10000, // $100.00
      metadata: {
        source: 'integration_test',
        test_round: '2'
      }
    });
    
    console.log(`   POST /api/deposits: ${createResponse.status}`);
    if (createResponse.status === 200 || createResponse.status === 201) {
      console.log(`   ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç`);
      console.log(`   –û—Ç–≤–µ—Ç: ${JSON.stringify(createResponse.body, null, 2)}`);
    } else {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${JSON.stringify(createResponse.body)}`);
    }
  } catch (error) {
    console.log(`   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`);
  }
  
  // Test 3: Webhook endpoint
  console.log('\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ webhook endpoint');
  
  try {
    const webhookResponse = await makeRequest('/api/stripe/webhook', 'POST', {
      id: 'evt_test_webhook',
      object: 'event',
      type: 'payment_intent.succeeded',
      data: {
        object: {
          id: 'pi_test_integration',
          amount: 10000,
          currency: 'usd',
          status: 'succeeded'
        }
      }
    }, {
      'stripe-signature': 'test_signature'
    });
    
    console.log(`   POST /api/stripe/webhook: ${webhookResponse.status}`);
    if (webhookResponse.status === 200) {
      console.log(`   ‚úÖ Webhook endpoint –¥–æ—Å—Ç—É–ø–µ–Ω`);
    } else if (webhookResponse.status === 400) {
      console.log(`   ‚ö†Ô∏è Webhook —Ç—Ä–µ–±—É–µ—Ç –≤–∞–ª–∏–¥–Ω—É—é –ø–æ–¥–ø–∏—Å—å (–æ–∂–∏–¥–∞–µ–º–æ)`);
    } else {
      console.log(`   ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${JSON.stringify(webhookResponse.body)}`);
    }
  } catch (error) {
    console.log(`   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`);
  }
  
  // Test 4: Demo endpoints (—á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é)
  console.log('\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ demo endpoints');

  try {
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º demo —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞–ø—Ä—è–º—É—é
    const demoResponse = await makeRequest('/api/demo');
    console.log(`   GET /api/demo: ${demoResponse.status}`);
    if (demoResponse.status === 200) {
      console.log(`   ‚úÖ Demo API —Ä–∞–±–æ—Ç–∞–µ—Ç`);
      console.log(`   –û—Ç–≤–µ—Ç: ${JSON.stringify(demoResponse.body, null, 2).substring(0, 200)}...`);
    } else {
      console.log(`   ‚ùå Demo API –æ—à–∏–±–∫–∞: ${JSON.stringify(demoResponse.body)}`);
    }

  } catch (error) {
    console.log(`   ‚ùå –û—à–∏–±–∫–∞ demo endpoints: ${error.message}`);
  }

  // Test 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö endpoints –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  console.log('\n5Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ endpoints –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');

  try {
    const noAuthResponse = await makeRequest('/api/deposits', 'GET', null, {});
    console.log(`   GET /api/deposits (–±–µ–∑ auth): ${noAuthResponse.status}`);
    if (noAuthResponse.status === 401) {
      console.log(`   ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ`);
    }

    const metricsNoAuthResponse = await makeRequest('/metrics', 'GET', null, {});
    console.log(`   GET /metrics (–±–µ–∑ auth): ${metricsNoAuthResponse.status}`);
    if (metricsNoAuthResponse.status === 401) {
      console.log(`   ‚úÖ Metrics –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ`);
    }

  } catch (error) {
    console.log(`   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${error.message}`);
  }
  
  console.log('\n‚úÖ –†–∞—É–Ω–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è 2 –∑–∞–≤–µ—Ä—à–µ–Ω!');
}

testStripeIntegration().catch(console.error);
